// Code generated by protoc-gen-go. DO NOT EDIT.
// source: picam.proto

package rpi

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RequestImage struct {
	Width                int32    `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height               int32    `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestImage) Reset()         { *m = RequestImage{} }
func (m *RequestImage) String() string { return proto.CompactTextString(m) }
func (*RequestImage) ProtoMessage()    {}
func (*RequestImage) Descriptor() ([]byte, []int) {
	return fileDescriptor_30fec5ee6d2f922d, []int{0}
}

func (m *RequestImage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestImage.Unmarshal(m, b)
}
func (m *RequestImage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestImage.Marshal(b, m, deterministic)
}
func (m *RequestImage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestImage.Merge(m, src)
}
func (m *RequestImage) XXX_Size() int {
	return xxx_messageInfo_RequestImage.Size(m)
}
func (m *RequestImage) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestImage.DiscardUnknown(m)
}

var xxx_messageInfo_RequestImage proto.InternalMessageInfo

func (m *RequestImage) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *RequestImage) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type ResponseImage struct {
	ImageBytes           []byte   `protobuf:"bytes,1,opt,name=imageBytes,proto3" json:"imageBytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseImage) Reset()         { *m = ResponseImage{} }
func (m *ResponseImage) String() string { return proto.CompactTextString(m) }
func (*ResponseImage) ProtoMessage()    {}
func (*ResponseImage) Descriptor() ([]byte, []int) {
	return fileDescriptor_30fec5ee6d2f922d, []int{1}
}

func (m *ResponseImage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseImage.Unmarshal(m, b)
}
func (m *ResponseImage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseImage.Marshal(b, m, deterministic)
}
func (m *ResponseImage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseImage.Merge(m, src)
}
func (m *ResponseImage) XXX_Size() int {
	return xxx_messageInfo_ResponseImage.Size(m)
}
func (m *ResponseImage) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseImage.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseImage proto.InternalMessageInfo

func (m *ResponseImage) GetImageBytes() []byte {
	if m != nil {
		return m.ImageBytes
	}
	return nil
}

func init() {
	proto.RegisterType((*RequestImage)(nil), "rpi.RequestImage")
	proto.RegisterType((*ResponseImage)(nil), "rpi.ResponseImage")
}

func init() { proto.RegisterFile("picam.proto", fileDescriptor_30fec5ee6d2f922d) }

var fileDescriptor_30fec5ee6d2f922d = []byte{
	// 169 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0xc8, 0x4c, 0x4e,
	0xcc, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x2a, 0xc8, 0x54, 0xb2, 0xe1, 0xe2,
	0x09, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0xf1, 0xcc, 0x4d, 0x4c, 0x4f, 0x15, 0x12, 0xe1, 0x62,
	0x2d, 0xcf, 0x4c, 0x29, 0xc9, 0x90, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0d, 0x82, 0x70, 0x84, 0xc4,
	0xb8, 0xd8, 0x32, 0x52, 0x33, 0xd3, 0x33, 0x4a, 0x24, 0x98, 0xc0, 0xc2, 0x50, 0x9e, 0x92, 0x3e,
	0x17, 0x6f, 0x50, 0x6a, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0x2a, 0x44, 0xbb, 0x1c, 0x17, 0x57, 0x26,
	0x88, 0xe1, 0x54, 0x59, 0x92, 0x5a, 0x0c, 0x36, 0x83, 0x27, 0x08, 0x49, 0xc4, 0xc8, 0x9e, 0x8b,
	0x35, 0x20, 0xd3, 0x39, 0x31, 0x57, 0xc8, 0x8c, 0x8b, 0xd3, 0x3d, 0xb5, 0xc4, 0xad, 0x28, 0x31,
	0x37, 0xb5, 0x58, 0x48, 0x50, 0xaf, 0xa8, 0x20, 0x53, 0x0f, 0xd9, 0x1d, 0x52, 0x42, 0x50, 0x21,
	0x24, 0xc3, 0x95, 0x18, 0x0c, 0x18, 0x93, 0xd8, 0xc0, 0x6e, 0x37, 0x06, 0x04, 0x00, 0x00, 0xff,
	0xff, 0xfd, 0xd5, 0xa8, 0x59, 0xca, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PiCamClient is the client API for PiCam service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PiCamClient interface {
	GetFrames(ctx context.Context, in *RequestImage, opts ...grpc.CallOption) (PiCam_GetFramesClient, error)
}

type piCamClient struct {
	cc *grpc.ClientConn
}

func NewPiCamClient(cc *grpc.ClientConn) PiCamClient {
	return &piCamClient{cc}
}

func (c *piCamClient) GetFrames(ctx context.Context, in *RequestImage, opts ...grpc.CallOption) (PiCam_GetFramesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PiCam_serviceDesc.Streams[0], "/rpi.PiCam/GetFrames", opts...)
	if err != nil {
		return nil, err
	}
	x := &piCamGetFramesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PiCam_GetFramesClient interface {
	Recv() (*ResponseImage, error)
	grpc.ClientStream
}

type piCamGetFramesClient struct {
	grpc.ClientStream
}

func (x *piCamGetFramesClient) Recv() (*ResponseImage, error) {
	m := new(ResponseImage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PiCamServer is the server API for PiCam service.
type PiCamServer interface {
	GetFrames(*RequestImage, PiCam_GetFramesServer) error
}

func RegisterPiCamServer(s *grpc.Server, srv PiCamServer) {
	s.RegisterService(&_PiCam_serviceDesc, srv)
}

func _PiCam_GetFrames_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestImage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PiCamServer).GetFrames(m, &piCamGetFramesServer{stream})
}

type PiCam_GetFramesServer interface {
	Send(*ResponseImage) error
	grpc.ServerStream
}

type piCamGetFramesServer struct {
	grpc.ServerStream
}

func (x *piCamGetFramesServer) Send(m *ResponseImage) error {
	return x.ServerStream.SendMsg(m)
}

var _PiCam_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpi.PiCam",
	HandlerType: (*PiCamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFrames",
			Handler:       _PiCam_GetFrames_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "picam.proto",
}
