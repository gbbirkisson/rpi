// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpio.proto

package rpi

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GpioPin struct {
	Pin                  int32    `protobuf:"varint,1,opt,name=pin,proto3" json:"pin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GpioPin) Reset()         { *m = GpioPin{} }
func (m *GpioPin) String() string { return proto.CompactTextString(m) }
func (*GpioPin) ProtoMessage()    {}
func (*GpioPin) Descriptor() ([]byte, []int) {
	return fileDescriptor_770c7e3939ac3542, []int{0}
}

func (m *GpioPin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GpioPin.Unmarshal(m, b)
}
func (m *GpioPin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GpioPin.Marshal(b, m, deterministic)
}
func (m *GpioPin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GpioPin.Merge(m, src)
}
func (m *GpioPin) XXX_Size() int {
	return xxx_messageInfo_GpioPin.Size(m)
}
func (m *GpioPin) XXX_DiscardUnknown() {
	xxx_messageInfo_GpioPin.DiscardUnknown(m)
}

var xxx_messageInfo_GpioPin proto.InternalMessageInfo

func (m *GpioPin) GetPin() int32 {
	if m != nil {
		return m.Pin
	}
	return 0
}

func init() {
	proto.RegisterType((*GpioPin)(nil), "rpi.GpioPin")
}

func init() { proto.RegisterFile("rpio.proto", fileDescriptor_770c7e3939ac3542) }

var fileDescriptor_770c7e3939ac3542 = []byte{
	// 186 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x2a, 0xc8, 0xcc,
	0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x2a, 0xc8, 0x94, 0xe2, 0x4a, 0x4a, 0x2c,
	0x4e, 0x85, 0x08, 0x28, 0x49, 0x73, 0xb1, 0xbb, 0x17, 0x64, 0xe6, 0x07, 0x64, 0xe6, 0x09, 0x09,
	0x70, 0x31, 0x17, 0x64, 0xe6, 0x49, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x06, 0x81, 0x98, 0x46, 0x07,
	0x98, 0xb8, 0x58, 0x40, 0xb2, 0x42, 0x72, 0x5c, 0x2c, 0xfe, 0x05, 0xa9, 0x79, 0x42, 0x9c, 0x7a,
	0x45, 0x05, 0x99, 0x7a, 0x61, 0xf9, 0x99, 0x29, 0x52, 0x08, 0xa6, 0x12, 0x83, 0x90, 0x3c, 0x17,
	0xab, 0x73, 0x4e, 0x7e, 0x71, 0x2a, 0x4e, 0x05, 0x4a, 0x5c, 0xac, 0x9e, 0x79, 0x05, 0xa5, 0x25,
	0x42, 0x3c, 0x60, 0x51, 0xa8, 0x95, 0xa8, 0x6a, 0x94, 0xb9, 0xd8, 0xfc, 0x4b, 0x4b, 0x08, 0x28,
	0x52, 0x02, 0xdb, 0x94, 0x9c, 0x8d, 0x4f, 0x8d, 0x02, 0x17, 0x73, 0x40, 0x79, 0x2e, 0x3e, 0x15,
	0x8a, 0x5c, 0x2c, 0x1e, 0x99, 0xe9, 0x19, 0x04, 0x0c, 0xf1, 0xc9, 0x2f, 0x27, 0xe0, 0xde, 0x90,
	0xfc, 0xf4, 0xf4, 0x9c, 0x54, 0x3c, 0x8a, 0x92, 0xd8, 0xc0, 0xc1, 0x6c, 0x0c, 0x08, 0x00, 0x00,
	0xff, 0xff, 0xba, 0xad, 0xe5, 0x7d, 0x85, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GpioClient is the client API for Gpio service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GpioClient interface {
	Open(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	Close(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	Input(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*Void, error)
	Output(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*Void, error)
	Clock(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*Void, error)
	Pwm(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*Void, error)
	High(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*Void, error)
	Low(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*Void, error)
	Toggle(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*Void, error)
}

type gpioClient struct {
	cc *grpc.ClientConn
}

func NewGpioClient(cc *grpc.ClientConn) GpioClient {
	return &gpioClient{cc}
}

func (c *gpioClient) Open(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/rpi.Gpio/Open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpioClient) Close(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/rpi.Gpio/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpioClient) Input(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/rpi.Gpio/Input", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpioClient) Output(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/rpi.Gpio/Output", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpioClient) Clock(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/rpi.Gpio/Clock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpioClient) Pwm(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/rpi.Gpio/Pwm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpioClient) High(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/rpi.Gpio/High", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpioClient) Low(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/rpi.Gpio/Low", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpioClient) Toggle(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/rpi.Gpio/Toggle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GpioServer is the server API for Gpio service.
type GpioServer interface {
	Open(context.Context, *Void) (*Void, error)
	Close(context.Context, *Void) (*Void, error)
	Input(context.Context, *GpioPin) (*Void, error)
	Output(context.Context, *GpioPin) (*Void, error)
	Clock(context.Context, *GpioPin) (*Void, error)
	Pwm(context.Context, *GpioPin) (*Void, error)
	High(context.Context, *GpioPin) (*Void, error)
	Low(context.Context, *GpioPin) (*Void, error)
	Toggle(context.Context, *GpioPin) (*Void, error)
}

func RegisterGpioServer(s *grpc.Server, srv GpioServer) {
	s.RegisterService(&_Gpio_serviceDesc, srv)
}

func _Gpio_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpioServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpi.Gpio/Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpioServer).Open(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gpio_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpioServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpi.Gpio/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpioServer).Close(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gpio_Input_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GpioPin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpioServer).Input(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpi.Gpio/Input",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpioServer).Input(ctx, req.(*GpioPin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gpio_Output_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GpioPin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpioServer).Output(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpi.Gpio/Output",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpioServer).Output(ctx, req.(*GpioPin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gpio_Clock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GpioPin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpioServer).Clock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpi.Gpio/Clock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpioServer).Clock(ctx, req.(*GpioPin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gpio_Pwm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GpioPin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpioServer).Pwm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpi.Gpio/Pwm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpioServer).Pwm(ctx, req.(*GpioPin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gpio_High_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GpioPin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpioServer).High(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpi.Gpio/High",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpioServer).High(ctx, req.(*GpioPin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gpio_Low_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GpioPin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpioServer).Low(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpi.Gpio/Low",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpioServer).Low(ctx, req.(*GpioPin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gpio_Toggle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GpioPin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpioServer).Toggle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpi.Gpio/Toggle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpioServer).Toggle(ctx, req.(*GpioPin))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gpio_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpi.Gpio",
	HandlerType: (*GpioServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Open",
			Handler:    _Gpio_Open_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _Gpio_Close_Handler,
		},
		{
			MethodName: "Input",
			Handler:    _Gpio_Input_Handler,
		},
		{
			MethodName: "Output",
			Handler:    _Gpio_Output_Handler,
		},
		{
			MethodName: "Clock",
			Handler:    _Gpio_Clock_Handler,
		},
		{
			MethodName: "Pwm",
			Handler:    _Gpio_Pwm_Handler,
		},
		{
			MethodName: "High",
			Handler:    _Gpio_High_Handler,
		},
		{
			MethodName: "Low",
			Handler:    _Gpio_Low_Handler,
		},
		{
			MethodName: "Toggle",
			Handler:    _Gpio_Toggle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpio.proto",
}
