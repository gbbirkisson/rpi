// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gpio.proto

package rpi

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GpioPin struct {
	Pin                  int32    `protobuf:"varint,1,opt,name=pin,proto3" json:"pin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GpioPin) Reset()         { *m = GpioPin{} }
func (m *GpioPin) String() string { return proto.CompactTextString(m) }
func (*GpioPin) ProtoMessage()    {}
func (*GpioPin) Descriptor() ([]byte, []int) {
	return fileDescriptor_59fedb88b556689a, []int{0}
}

func (m *GpioPin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GpioPin.Unmarshal(m, b)
}
func (m *GpioPin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GpioPin.Marshal(b, m, deterministic)
}
func (m *GpioPin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GpioPin.Merge(m, src)
}
func (m *GpioPin) XXX_Size() int {
	return xxx_messageInfo_GpioPin.Size(m)
}
func (m *GpioPin) XXX_DiscardUnknown() {
	xxx_messageInfo_GpioPin.DiscardUnknown(m)
}

var xxx_messageInfo_GpioPin proto.InternalMessageInfo

func (m *GpioPin) GetPin() int32 {
	if m != nil {
		return m.Pin
	}
	return 0
}

type RequestFreq struct {
	Pin                  int32    `protobuf:"varint,1,opt,name=pin,proto3" json:"pin,omitempty"`
	Freq                 int32    `protobuf:"varint,2,opt,name=freq,proto3" json:"freq,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestFreq) Reset()         { *m = RequestFreq{} }
func (m *RequestFreq) String() string { return proto.CompactTextString(m) }
func (*RequestFreq) ProtoMessage()    {}
func (*RequestFreq) Descriptor() ([]byte, []int) {
	return fileDescriptor_59fedb88b556689a, []int{1}
}

func (m *RequestFreq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestFreq.Unmarshal(m, b)
}
func (m *RequestFreq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestFreq.Marshal(b, m, deterministic)
}
func (m *RequestFreq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestFreq.Merge(m, src)
}
func (m *RequestFreq) XXX_Size() int {
	return xxx_messageInfo_RequestFreq.Size(m)
}
func (m *RequestFreq) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestFreq.DiscardUnknown(m)
}

var xxx_messageInfo_RequestFreq proto.InternalMessageInfo

func (m *RequestFreq) GetPin() int32 {
	if m != nil {
		return m.Pin
	}
	return 0
}

func (m *RequestFreq) GetFreq() int32 {
	if m != nil {
		return m.Freq
	}
	return 0
}

type RequestDutyCycle struct {
	Pin                  int32    `protobuf:"varint,1,opt,name=pin,proto3" json:"pin,omitempty"`
	DutyLen              int32    `protobuf:"varint,2,opt,name=dutyLen,proto3" json:"dutyLen,omitempty"`
	CycleLen             int32    `protobuf:"varint,3,opt,name=cycleLen,proto3" json:"cycleLen,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestDutyCycle) Reset()         { *m = RequestDutyCycle{} }
func (m *RequestDutyCycle) String() string { return proto.CompactTextString(m) }
func (*RequestDutyCycle) ProtoMessage()    {}
func (*RequestDutyCycle) Descriptor() ([]byte, []int) {
	return fileDescriptor_59fedb88b556689a, []int{2}
}

func (m *RequestDutyCycle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestDutyCycle.Unmarshal(m, b)
}
func (m *RequestDutyCycle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestDutyCycle.Marshal(b, m, deterministic)
}
func (m *RequestDutyCycle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestDutyCycle.Merge(m, src)
}
func (m *RequestDutyCycle) XXX_Size() int {
	return xxx_messageInfo_RequestDutyCycle.Size(m)
}
func (m *RequestDutyCycle) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestDutyCycle.DiscardUnknown(m)
}

var xxx_messageInfo_RequestDutyCycle proto.InternalMessageInfo

func (m *RequestDutyCycle) GetPin() int32 {
	if m != nil {
		return m.Pin
	}
	return 0
}

func (m *RequestDutyCycle) GetDutyLen() int32 {
	if m != nil {
		return m.DutyLen
	}
	return 0
}

func (m *RequestDutyCycle) GetCycleLen() int32 {
	if m != nil {
		return m.CycleLen
	}
	return 0
}

type RequestWrite struct {
	Pin                  int32    `protobuf:"varint,1,opt,name=pin,proto3" json:"pin,omitempty"`
	State                int32    `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestWrite) Reset()         { *m = RequestWrite{} }
func (m *RequestWrite) String() string { return proto.CompactTextString(m) }
func (*RequestWrite) ProtoMessage()    {}
func (*RequestWrite) Descriptor() ([]byte, []int) {
	return fileDescriptor_59fedb88b556689a, []int{3}
}

func (m *RequestWrite) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestWrite.Unmarshal(m, b)
}
func (m *RequestWrite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestWrite.Marshal(b, m, deterministic)
}
func (m *RequestWrite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestWrite.Merge(m, src)
}
func (m *RequestWrite) XXX_Size() int {
	return xxx_messageInfo_RequestWrite.Size(m)
}
func (m *RequestWrite) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestWrite.DiscardUnknown(m)
}

var xxx_messageInfo_RequestWrite proto.InternalMessageInfo

func (m *RequestWrite) GetPin() int32 {
	if m != nil {
		return m.Pin
	}
	return 0
}

func (m *RequestWrite) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type ResponseRead struct {
	State                int32    `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseRead) Reset()         { *m = ResponseRead{} }
func (m *ResponseRead) String() string { return proto.CompactTextString(m) }
func (*ResponseRead) ProtoMessage()    {}
func (*ResponseRead) Descriptor() ([]byte, []int) {
	return fileDescriptor_59fedb88b556689a, []int{4}
}

func (m *ResponseRead) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseRead.Unmarshal(m, b)
}
func (m *ResponseRead) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseRead.Marshal(b, m, deterministic)
}
func (m *ResponseRead) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseRead.Merge(m, src)
}
func (m *ResponseRead) XXX_Size() int {
	return xxx_messageInfo_ResponseRead.Size(m)
}
func (m *ResponseRead) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseRead.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseRead proto.InternalMessageInfo

func (m *ResponseRead) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type RequestEdgeDetect struct {
	Pin                  int32    `protobuf:"varint,1,opt,name=pin,proto3" json:"pin,omitempty"`
	Edge                 int32    `protobuf:"varint,2,opt,name=edge,proto3" json:"edge,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestEdgeDetect) Reset()         { *m = RequestEdgeDetect{} }
func (m *RequestEdgeDetect) String() string { return proto.CompactTextString(m) }
func (*RequestEdgeDetect) ProtoMessage()    {}
func (*RequestEdgeDetect) Descriptor() ([]byte, []int) {
	return fileDescriptor_59fedb88b556689a, []int{5}
}

func (m *RequestEdgeDetect) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestEdgeDetect.Unmarshal(m, b)
}
func (m *RequestEdgeDetect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestEdgeDetect.Marshal(b, m, deterministic)
}
func (m *RequestEdgeDetect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestEdgeDetect.Merge(m, src)
}
func (m *RequestEdgeDetect) XXX_Size() int {
	return xxx_messageInfo_RequestEdgeDetect.Size(m)
}
func (m *RequestEdgeDetect) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestEdgeDetect.DiscardUnknown(m)
}

var xxx_messageInfo_RequestEdgeDetect proto.InternalMessageInfo

func (m *RequestEdgeDetect) GetPin() int32 {
	if m != nil {
		return m.Pin
	}
	return 0
}

func (m *RequestEdgeDetect) GetEdge() int32 {
	if m != nil {
		return m.Edge
	}
	return 0
}

type ResponseEdgeDetected struct {
	Detected             bool     `protobuf:"varint,1,opt,name=detected,proto3" json:"detected,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseEdgeDetected) Reset()         { *m = ResponseEdgeDetected{} }
func (m *ResponseEdgeDetected) String() string { return proto.CompactTextString(m) }
func (*ResponseEdgeDetected) ProtoMessage()    {}
func (*ResponseEdgeDetected) Descriptor() ([]byte, []int) {
	return fileDescriptor_59fedb88b556689a, []int{6}
}

func (m *ResponseEdgeDetected) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseEdgeDetected.Unmarshal(m, b)
}
func (m *ResponseEdgeDetected) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseEdgeDetected.Marshal(b, m, deterministic)
}
func (m *ResponseEdgeDetected) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseEdgeDetected.Merge(m, src)
}
func (m *ResponseEdgeDetected) XXX_Size() int {
	return xxx_messageInfo_ResponseEdgeDetected.Size(m)
}
func (m *ResponseEdgeDetected) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseEdgeDetected.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseEdgeDetected proto.InternalMessageInfo

func (m *ResponseEdgeDetected) GetDetected() bool {
	if m != nil {
		return m.Detected
	}
	return false
}

func init() {
	proto.RegisterType((*GpioPin)(nil), "rpi.GpioPin")
	proto.RegisterType((*RequestFreq)(nil), "rpi.RequestFreq")
	proto.RegisterType((*RequestDutyCycle)(nil), "rpi.RequestDutyCycle")
	proto.RegisterType((*RequestWrite)(nil), "rpi.RequestWrite")
	proto.RegisterType((*ResponseRead)(nil), "rpi.ResponseRead")
	proto.RegisterType((*RequestEdgeDetect)(nil), "rpi.RequestEdgeDetect")
	proto.RegisterType((*ResponseEdgeDetected)(nil), "rpi.ResponseEdgeDetected")
}

func init() { proto.RegisterFile("gpio.proto", fileDescriptor_59fedb88b556689a) }

var fileDescriptor_59fedb88b556689a = []byte{
	// 440 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0x4d, 0x8f, 0xd3, 0x30,
	0x10, 0x86, 0xb7, 0x24, 0x69, 0xbb, 0xb3, 0x3d, 0xec, 0x5a, 0x0b, 0x2a, 0x45, 0x82, 0xc5, 0x2c,
	0x02, 0x0e, 0x14, 0x69, 0x57, 0x42, 0xea, 0xb9, 0xe5, 0x4b, 0xaa, 0xd4, 0x2a, 0x7c, 0x49, 0xdc,
	0xda, 0x64, 0x1a, 0x2c, 0x42, 0xec, 0x26, 0x0e, 0x55, 0x7f, 0x25, 0x7f, 0x09, 0xd9, 0x71, 0x9a,
	0x58, 0x74, 0x93, 0xdb, 0xcc, 0xe4, 0x79, 0xdf, 0x19, 0xbb, 0xe3, 0x02, 0x44, 0x82, 0xf1, 0xb1,
	0x48, 0xb9, 0xe4, 0xc4, 0x49, 0x05, 0x1b, 0xc1, 0x7a, 0x95, 0x61, 0x51, 0xa0, 0x8f, 0xa0, 0xf7,
	0x41, 0x30, 0xbe, 0x64, 0x09, 0x39, 0x07, 0x47, 0xb0, 0x64, 0xd8, 0xb9, 0xea, 0xbc, 0xf4, 0x7c,
	0x15, 0xd2, 0x5b, 0x38, 0xf3, 0x71, 0x9b, 0x63, 0x26, 0xdf, 0xa7, 0xb8, 0xfd, 0x1f, 0x20, 0x04,
	0xdc, 0x4d, 0x8a, 0xdb, 0xe1, 0x3d, 0x5d, 0xd2, 0x31, 0xfd, 0x01, 0xe7, 0x46, 0x34, 0xcb, 0xe5,
	0x7e, 0xba, 0x0f, 0x62, 0x3c, 0xa2, 0x1c, 0x42, 0x2f, 0xcc, 0xe5, 0x7e, 0x8e, 0x89, 0x11, 0x97,
	0x29, 0x19, 0x41, 0x3f, 0x50, 0x22, 0xf5, 0xc9, 0xd1, 0x9f, 0x0e, 0x39, 0x7d, 0x0b, 0x03, 0xe3,
	0xfd, 0x3d, 0x65, 0xf2, 0x98, 0xef, 0x25, 0x78, 0x99, 0x5c, 0x49, 0x34, 0xae, 0x45, 0x42, 0xaf,
	0x95, 0x2e, 0x13, 0x3c, 0xc9, 0xd0, 0xc7, 0x55, 0x58, 0x51, 0x9d, 0x3a, 0x35, 0x81, 0x0b, 0xe3,
	0xfe, 0x2e, 0x8c, 0x70, 0x86, 0x12, 0x03, 0x79, 0xfc, 0xd0, 0x18, 0x46, 0x65, 0x07, 0x1d, 0xd3,
	0x1b, 0xb8, 0x2c, 0x1b, 0x54, 0x5a, 0x0c, 0xd5, 0x61, 0x42, 0x13, 0x6b, 0x8b, 0xbe, 0x7f, 0xc8,
	0x6f, 0xfe, 0x7a, 0x70, 0xa6, 0xee, 0xfe, 0x33, 0xa6, 0x7f, 0x58, 0x80, 0xe4, 0x31, 0xb8, 0x0b,
	0x81, 0x09, 0x39, 0x1d, 0xa7, 0x82, 0x8d, 0xbf, 0x71, 0x16, 0x8e, 0xaa, 0x90, 0x9e, 0x90, 0x27,
	0xe0, 0x4d, 0x63, 0x9e, 0xe1, 0x9d, 0x00, 0x05, 0xef, 0x53, 0x22, 0x72, 0x49, 0x06, 0xba, 0x6a,
	0x7e, 0x57, 0x9b, 0x79, 0x06, 0xdd, 0x45, 0x2e, 0x5b, 0x20, 0xaa, 0x3b, 0x05, 0xbf, 0x9a, 0x98,
	0x2b, 0x70, 0x96, 0xbb, 0xdf, 0x2d, 0xad, 0x96, 0x79, 0x1c, 0x7f, 0x15, 0x4d, 0xd0, 0x73, 0xe8,
	0x2b, 0x68, 0xc6, 0x77, 0x49, 0x13, 0x76, 0x0d, 0x3d, 0x85, 0x2d, 0x36, 0x9b, 0x26, 0xea, 0x29,
	0xb8, 0x1f, 0x59, 0xf4, 0xb3, 0x65, 0xec, 0x39, 0xdf, 0xb5, 0x8c, 0xfd, 0x85, 0x47, 0x51, 0x8c,
	0x4d, 0xd0, 0x0b, 0xf0, 0x8a, 0x0d, 0xbc, 0xd0, 0xd5, 0xfa, 0x52, 0xda, 0xe0, 0x2b, 0x70, 0xf5,
	0xc6, 0xd9, 0x5e, 0xa5, 0xaa, 0x5a, 0x49, 0x7d, 0x15, 0x6e, 0xf1, 0xcc, 0xea, 0x96, 0xaa, 0x62,
	0x3b, 0xbe, 0x81, 0xd3, 0xea, 0x61, 0xdd, 0xaf, 0xb3, 0x87, 0xb2, 0x2d, 0x78, 0x0d, 0x5d, 0xb3,
	0xcb, 0x0f, 0xea, 0x74, 0xb5, 0xa7, 0x36, 0x3e, 0x81, 0x81, 0xb5, 0xc2, 0xf6, 0xe4, 0x0f, 0xad,
	0xc9, 0xeb, 0x20, 0x3d, 0x59, 0x77, 0xf5, 0x7f, 0xca, 0xed, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x4a, 0xf4, 0x53, 0x5c, 0x72, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GpioServiceClient is the client API for GpioService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GpioServiceClient interface {
	// Init / Shutdown
	Open(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	Close(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	// Pin Modes
	Input(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*Void, error)
	Output(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*Void, error)
	Clock(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*Void, error)
	Pwm(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*Void, error)
	PullUp(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*Void, error)
	PullDown(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*Void, error)
	PullOff(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*Void, error)
	// Basic pin operations
	High(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*Void, error)
	Low(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*Void, error)
	Toggle(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*Void, error)
	Write(ctx context.Context, in *RequestWrite, opts ...grpc.CallOption) (*Void, error)
	Read(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*ResponseRead, error)
	// Clock and PWM operations
	Freq(ctx context.Context, in *RequestFreq, opts ...grpc.CallOption) (*Void, error)
	DutyCycle(ctx context.Context, in *RequestDutyCycle, opts ...grpc.CallOption) (*Void, error)
	// Edge detection
	Detect(ctx context.Context, in *RequestEdgeDetect, opts ...grpc.CallOption) (*Void, error)
	EdgeDetected(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*ResponseEdgeDetected, error)
}

type gpioServiceClient struct {
	cc *grpc.ClientConn
}

func NewGpioServiceClient(cc *grpc.ClientConn) GpioServiceClient {
	return &gpioServiceClient{cc}
}

func (c *gpioServiceClient) Open(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/rpi.GpioService/Open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpioServiceClient) Close(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/rpi.GpioService/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpioServiceClient) Input(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/rpi.GpioService/Input", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpioServiceClient) Output(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/rpi.GpioService/Output", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpioServiceClient) Clock(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/rpi.GpioService/Clock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpioServiceClient) Pwm(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/rpi.GpioService/Pwm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpioServiceClient) PullUp(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/rpi.GpioService/PullUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpioServiceClient) PullDown(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/rpi.GpioService/PullDown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpioServiceClient) PullOff(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/rpi.GpioService/PullOff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpioServiceClient) High(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/rpi.GpioService/High", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpioServiceClient) Low(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/rpi.GpioService/Low", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpioServiceClient) Toggle(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/rpi.GpioService/Toggle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpioServiceClient) Write(ctx context.Context, in *RequestWrite, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/rpi.GpioService/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpioServiceClient) Read(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*ResponseRead, error) {
	out := new(ResponseRead)
	err := c.cc.Invoke(ctx, "/rpi.GpioService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpioServiceClient) Freq(ctx context.Context, in *RequestFreq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/rpi.GpioService/Freq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpioServiceClient) DutyCycle(ctx context.Context, in *RequestDutyCycle, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/rpi.GpioService/DutyCycle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpioServiceClient) Detect(ctx context.Context, in *RequestEdgeDetect, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/rpi.GpioService/Detect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpioServiceClient) EdgeDetected(ctx context.Context, in *GpioPin, opts ...grpc.CallOption) (*ResponseEdgeDetected, error) {
	out := new(ResponseEdgeDetected)
	err := c.cc.Invoke(ctx, "/rpi.GpioService/EdgeDetected", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GpioServiceServer is the server API for GpioService service.
type GpioServiceServer interface {
	// Init / Shutdown
	Open(context.Context, *Void) (*Void, error)
	Close(context.Context, *Void) (*Void, error)
	// Pin Modes
	Input(context.Context, *GpioPin) (*Void, error)
	Output(context.Context, *GpioPin) (*Void, error)
	Clock(context.Context, *GpioPin) (*Void, error)
	Pwm(context.Context, *GpioPin) (*Void, error)
	PullUp(context.Context, *GpioPin) (*Void, error)
	PullDown(context.Context, *GpioPin) (*Void, error)
	PullOff(context.Context, *GpioPin) (*Void, error)
	// Basic pin operations
	High(context.Context, *GpioPin) (*Void, error)
	Low(context.Context, *GpioPin) (*Void, error)
	Toggle(context.Context, *GpioPin) (*Void, error)
	Write(context.Context, *RequestWrite) (*Void, error)
	Read(context.Context, *GpioPin) (*ResponseRead, error)
	// Clock and PWM operations
	Freq(context.Context, *RequestFreq) (*Void, error)
	DutyCycle(context.Context, *RequestDutyCycle) (*Void, error)
	// Edge detection
	Detect(context.Context, *RequestEdgeDetect) (*Void, error)
	EdgeDetected(context.Context, *GpioPin) (*ResponseEdgeDetected, error)
}

func RegisterGpioServiceServer(s *grpc.Server, srv GpioServiceServer) {
	s.RegisterService(&_GpioService_serviceDesc, srv)
}

func _GpioService_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpioServiceServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpi.GpioService/Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpioServiceServer).Open(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpioService_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpioServiceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpi.GpioService/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpioServiceServer).Close(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpioService_Input_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GpioPin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpioServiceServer).Input(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpi.GpioService/Input",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpioServiceServer).Input(ctx, req.(*GpioPin))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpioService_Output_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GpioPin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpioServiceServer).Output(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpi.GpioService/Output",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpioServiceServer).Output(ctx, req.(*GpioPin))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpioService_Clock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GpioPin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpioServiceServer).Clock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpi.GpioService/Clock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpioServiceServer).Clock(ctx, req.(*GpioPin))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpioService_Pwm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GpioPin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpioServiceServer).Pwm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpi.GpioService/Pwm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpioServiceServer).Pwm(ctx, req.(*GpioPin))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpioService_PullUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GpioPin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpioServiceServer).PullUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpi.GpioService/PullUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpioServiceServer).PullUp(ctx, req.(*GpioPin))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpioService_PullDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GpioPin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpioServiceServer).PullDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpi.GpioService/PullDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpioServiceServer).PullDown(ctx, req.(*GpioPin))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpioService_PullOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GpioPin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpioServiceServer).PullOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpi.GpioService/PullOff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpioServiceServer).PullOff(ctx, req.(*GpioPin))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpioService_High_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GpioPin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpioServiceServer).High(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpi.GpioService/High",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpioServiceServer).High(ctx, req.(*GpioPin))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpioService_Low_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GpioPin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpioServiceServer).Low(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpi.GpioService/Low",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpioServiceServer).Low(ctx, req.(*GpioPin))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpioService_Toggle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GpioPin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpioServiceServer).Toggle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpi.GpioService/Toggle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpioServiceServer).Toggle(ctx, req.(*GpioPin))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpioService_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWrite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpioServiceServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpi.GpioService/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpioServiceServer).Write(ctx, req.(*RequestWrite))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpioService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GpioPin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpioServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpi.GpioService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpioServiceServer).Read(ctx, req.(*GpioPin))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpioService_Freq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestFreq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpioServiceServer).Freq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpi.GpioService/Freq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpioServiceServer).Freq(ctx, req.(*RequestFreq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpioService_DutyCycle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDutyCycle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpioServiceServer).DutyCycle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpi.GpioService/DutyCycle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpioServiceServer).DutyCycle(ctx, req.(*RequestDutyCycle))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpioService_Detect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEdgeDetect)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpioServiceServer).Detect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpi.GpioService/Detect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpioServiceServer).Detect(ctx, req.(*RequestEdgeDetect))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpioService_EdgeDetected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GpioPin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpioServiceServer).EdgeDetected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpi.GpioService/EdgeDetected",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpioServiceServer).EdgeDetected(ctx, req.(*GpioPin))
	}
	return interceptor(ctx, in, info, handler)
}

var _GpioService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpi.GpioService",
	HandlerType: (*GpioServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Open",
			Handler:    _GpioService_Open_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _GpioService_Close_Handler,
		},
		{
			MethodName: "Input",
			Handler:    _GpioService_Input_Handler,
		},
		{
			MethodName: "Output",
			Handler:    _GpioService_Output_Handler,
		},
		{
			MethodName: "Clock",
			Handler:    _GpioService_Clock_Handler,
		},
		{
			MethodName: "Pwm",
			Handler:    _GpioService_Pwm_Handler,
		},
		{
			MethodName: "PullUp",
			Handler:    _GpioService_PullUp_Handler,
		},
		{
			MethodName: "PullDown",
			Handler:    _GpioService_PullDown_Handler,
		},
		{
			MethodName: "PullOff",
			Handler:    _GpioService_PullOff_Handler,
		},
		{
			MethodName: "High",
			Handler:    _GpioService_High_Handler,
		},
		{
			MethodName: "Low",
			Handler:    _GpioService_Low_Handler,
		},
		{
			MethodName: "Toggle",
			Handler:    _GpioService_Toggle_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _GpioService_Write_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _GpioService_Read_Handler,
		},
		{
			MethodName: "Freq",
			Handler:    _GpioService_Freq_Handler,
		},
		{
			MethodName: "DutyCycle",
			Handler:    _GpioService_DutyCycle_Handler,
		},
		{
			MethodName: "Detect",
			Handler:    _GpioService_Detect_Handler,
		},
		{
			MethodName: "EdgeDetected",
			Handler:    _GpioService_EdgeDetected_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gpio.proto",
}
