// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common.proto

package rpi

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type VersionRes struct {
	Revision             string   `protobuf:"bytes,1,opt,name=revision,proto3" json:"revision,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VersionRes) Reset()         { *m = VersionRes{} }
func (m *VersionRes) String() string { return proto.CompactTextString(m) }
func (*VersionRes) ProtoMessage()    {}
func (*VersionRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}

func (m *VersionRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VersionRes.Unmarshal(m, b)
}
func (m *VersionRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VersionRes.Marshal(b, m, deterministic)
}
func (m *VersionRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionRes.Merge(m, src)
}
func (m *VersionRes) XXX_Size() int {
	return xxx_messageInfo_VersionRes.Size(m)
}
func (m *VersionRes) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionRes.DiscardUnknown(m)
}

var xxx_messageInfo_VersionRes proto.InternalMessageInfo

func (m *VersionRes) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

func (m *VersionRes) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type ModprobeRequest struct {
	Params               string   `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ModprobeRequest) Reset()         { *m = ModprobeRequest{} }
func (m *ModprobeRequest) String() string { return proto.CompactTextString(m) }
func (*ModprobeRequest) ProtoMessage()    {}
func (*ModprobeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{1}
}

func (m *ModprobeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ModprobeRequest.Unmarshal(m, b)
}
func (m *ModprobeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ModprobeRequest.Marshal(b, m, deterministic)
}
func (m *ModprobeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModprobeRequest.Merge(m, src)
}
func (m *ModprobeRequest) XXX_Size() int {
	return xxx_messageInfo_ModprobeRequest.Size(m)
}
func (m *ModprobeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ModprobeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ModprobeRequest proto.InternalMessageInfo

func (m *ModprobeRequest) GetParams() string {
	if m != nil {
		return m.Params
	}
	return ""
}

func init() {
	proto.RegisterType((*VersionRes)(nil), "rpi.VersionRes")
	proto.RegisterType((*ModprobeRequest)(nil), "rpi.ModprobeRequest")
}

func init() { proto.RegisterFile("common.proto", fileDescriptor_555bd8c177793206) }

var fileDescriptor_555bd8c177793206 = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xce, 0xcf, 0xcd,
	0xcd, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x2a, 0xc8, 0x94, 0xe2, 0x4a,
	0x4a, 0x2c, 0x4e, 0x85, 0x08, 0x28, 0x39, 0x71, 0x71, 0x85, 0xa5, 0x16, 0x15, 0x67, 0xe6, 0xe7,
	0x05, 0xa5, 0x16, 0x0b, 0x49, 0x71, 0x71, 0x14, 0xa5, 0x96, 0x65, 0x82, 0xb8, 0x12, 0x8c, 0x0a,
	0x8c, 0x1a, 0x9c, 0x41, 0x70, 0xbe, 0x90, 0x04, 0x17, 0x7b, 0x19, 0x44, 0xa5, 0x04, 0x13, 0x58,
	0x0a, 0xc6, 0x55, 0xd2, 0xe4, 0xe2, 0xf7, 0xcd, 0x4f, 0x29, 0x28, 0xca, 0x4f, 0x4a, 0x0d, 0x4a,
	0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe3, 0x62, 0x2b, 0x48, 0x2c, 0x4a, 0xcc, 0x2d, 0x86,
	0x1a, 0x03, 0xe5, 0x19, 0x65, 0x71, 0xf1, 0x3a, 0x83, 0xdd, 0x13, 0x9c, 0x5a, 0x54, 0x96, 0x99,
	0x9c, 0x2a, 0xa4, 0xc5, 0xc5, 0xe5, 0x9e, 0x5a, 0x02, 0x75, 0x82, 0x10, 0xa7, 0x5e, 0x51, 0x41,
	0xa6, 0x5e, 0x58, 0x7e, 0x66, 0x8a, 0x14, 0x3f, 0x84, 0x09, 0x77, 0x9b, 0x12, 0x83, 0x90, 0x2e,
	0x17, 0x07, 0xcc, 0x1e, 0x21, 0x11, 0xb0, 0x34, 0x9a, 0xb5, 0x52, 0x08, 0xfd, 0x4a, 0x0c, 0x49,
	0x6c, 0x60, 0x1f, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc5, 0xa1, 0x05, 0x3d, 0x02, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CommonServiceClient is the client API for CommonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommonServiceClient interface {
	GetVersion(ctx context.Context, in *Void, opts ...grpc.CallOption) (*VersionRes, error)
	Modprobe(ctx context.Context, in *ModprobeRequest, opts ...grpc.CallOption) (*Void, error)
}

type commonServiceClient struct {
	cc *grpc.ClientConn
}

func NewCommonServiceClient(cc *grpc.ClientConn) CommonServiceClient {
	return &commonServiceClient{cc}
}

func (c *commonServiceClient) GetVersion(ctx context.Context, in *Void, opts ...grpc.CallOption) (*VersionRes, error) {
	out := new(VersionRes)
	err := c.cc.Invoke(ctx, "/rpi.CommonService/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonServiceClient) Modprobe(ctx context.Context, in *ModprobeRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/rpi.CommonService/Modprobe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommonServiceServer is the server API for CommonService service.
type CommonServiceServer interface {
	GetVersion(context.Context, *Void) (*VersionRes, error)
	Modprobe(context.Context, *ModprobeRequest) (*Void, error)
}

func RegisterCommonServiceServer(s *grpc.Server, srv CommonServiceServer) {
	s.RegisterService(&_CommonService_serviceDesc, srv)
}

func _CommonService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpi.CommonService/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).GetVersion(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonService_Modprobe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModprobeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).Modprobe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpi.CommonService/Modprobe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).Modprobe(ctx, req.(*ModprobeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommonService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpi.CommonService",
	HandlerType: (*CommonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _CommonService_GetVersion_Handler,
		},
		{
			MethodName: "Modprobe",
			Handler:    _CommonService_Modprobe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common.proto",
}
